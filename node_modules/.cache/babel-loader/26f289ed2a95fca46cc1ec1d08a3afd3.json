{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\nababrata deb\\\\Desktop\\\\resume-clone\\\\ReactJS-Projects\\\\netflix\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport './Row.css';\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  }; //https://www.youtube.com/watch?v=sfM7_JLk-84\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: \"white\"\n      },\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\n;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/nababrata deb/Desktop/resume-clone/ReactJS-Projects/netflix/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","baseUrl","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","color","map","poster_path","backdrop_path","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,MAAMC,OAAO,GAAG,sCAAhB;;AAEA,SAASC,GAAT,CAAc;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAd,EAA+C;AAAA;;AAC7C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AAEDD,IAAAA,SAAS;AACV,GARQ,EAQN,CAACN,QAAD,CARM,CAAT;AAUA,QAAMW,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE;AADA;AAHD,GAAb,CAd6C,CAqB7C;;AAEA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAGb,UAAH,EAAe;AACbC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEO;AACLT,MAAAA,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CAAgCC,IAAhC,CAAqCC,GAAG,IAAI;AAC1C,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAnB,QAAAA,aAAa,CAACgB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb;AACD,OAHD,EAGGiB,KAHH,CAGSC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAHlB;AAID;AACF,GATD;;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAI,MAAA,KAAK,EAAE;AAACG,QAAAA,KAAK,EAAE;AAAR,OAAX;AAAA,gBAA8B9B;AAA9B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACGG,MAAM,CAAC4B,GAAP,CAAYb,KAAD,iBACV;AAEE,QAAA,OAAO,EAAE,MAAID,WAAW,CAACC,KAAD,CAF1B;AAGE,QAAA,SAAS,EAAG,eAAchB,UAAU,IAAI,kBAAmB,EAH7D;AAIE,QAAA,GAAG,EAAG,GAAEJ,OAAQ,GAAEI,UAAU,GAAGgB,KAAK,CAACc,WAAT,GAAuBd,KAAK,CAACe,aAAc,EAJzE;AAKE,QAAA,GAAG,EAAEf,KAAK,CAACC;AALb,SACOD,KAAK,CAACgB,EADb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,EAaG7B,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAGA,UAAnB;AAA+B,MAAA,IAAI,EAAEO;AAArC;AAAA;AAAA;AAAA;AAAA,YAbjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GAnDQb,G;;KAAAA,G;AAmDR;AAED,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport './Row.css';\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row ({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1\r\n    }\r\n  };\r\n  //https://www.youtube.com/watch?v=sfM7_JLk-84\r\n\r\n  const handleClick = (movie) => {\r\n    if(trailerUrl) {\r\n      setTrailerUrl('');\r\n    } else {\r\n      movieTrailer(movie?.name || \"\").then(url => {\r\n        const urlParams = new URLSearchParams(new URL(url).search);\r\n        setTrailerUrl(urlParams.get('v'));\r\n      }).catch(error => console.log(error))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2 style={{color: \"white\"}}>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={()=>handleClick(movie)}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId= {trailerUrl} opts={opts}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}